// @flow
import type { HKT } from './HKT'
import type { Functor, FunctorComposition } from './Functor'
import type { Foldable, FoldableComposition } from './Foldable'
import type { Applicative } from './Applicative'

export interface Traversable<T> extends Functor<T>, Foldable<T> {
  traverse<F, A, B, UF, LF, UT, LT>(
    F: Applicative<F>
  ): (f: (a: A) => HKT<F, UF, LF, B>, ta: HKT<T, UT, LT, A>) => HKT<F, UF, LF, HKT<T, UT, LT, B>>;
}

export interface TraversableComposition<F, G> extends FoldableComposition<F, G>, FunctorComposition<F, G> {
  traverse: <H>(
    H: Applicative<H>
  ) => <A, B, UH, LH, UF, LF, UG, LG>(
    f: (a: A) => HKT<H, UH, LH, B>,
    fga: HKT<F, UF, LF, HKT<G, UG, LG, A>>
  ) => HKT<H, UH, LH, HKT<F, UF, LF, HKT<G, UG, LG, B>>>;
}

declare export var sequence: <F, T>(
  F: Applicative<F>,
  T: Traversable<T>
) => <A, FU, FL, TU, TL>(tfa: HKT<T, TU, TL, HKT<F, FU, FL, A>>) => HKT<F, FU, FL, HKT<T, TU, TL, A>>

declare export var getTraversableComposition: <F, G>(
  F: Traversable<F>,
  G: Traversable<G>
) => TraversableComposition<F, G>
