// @flow
import type { HKT } from './HKT'

declare export var unsafeCoerce: <A, B>(a: A) => B

export type Lazy<A> = () => A

export type Function9<A, B, C, D, E, F, G, H, I, J> = (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I) => J
export type Function8<A, B, C, D, E, F, G, H, I> = (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H) => I
export type Function7<A, B, C, D, E, F, G, H> = (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => H
export type Function6<A, B, C, D, E, F, G> = (a: A, b: B, c: C, d: D, e: E, f: F) => G
export type Function5<A, B, C, D, E, F> = (a: A, b: B, c: C, d: D, e: E) => F
export type Function4<A, B, C, D, E> = (a: A, b: B, c: C, d: D) => E
export type Function3<A, B, C, D> = (a: A, b: B, c: C) => D
export type Function2<A, B, C> = (a: A, b: B) => C
export type Function1<A, B> = (a: A) => B

export type Curried9<A, B, C, D, E, F, G, H, I, J> = (
  a: A
) => (b: B) => (c: C) => (d: D) => (e: E) => (f: F) => (g: G) => (h: H) => (i: I) => J
export type Curried8<A, B, C, D, E, F, G, H, I> = (
  a: A
) => (b: B) => (c: C) => (d: D) => (e: E) => (f: F) => (g: G) => (h: H) => I
export type Curried7<A, B, C, D, E, F, G, H> = (a: A) => (b: B) => (c: C) => (d: D) => (e: E) => (f: F) => (g: G) => H
export type Curried6<A, B, C, D, E, F, G> = (a: A) => (b: B) => (c: C) => (d: D) => (e: E) => (f: F) => G
export type Curried5<A, B, C, D, E, F> = (a: A) => (b: B) => (c: C) => (d: D) => (e: E) => F
export type Curried4<A, B, C, D, E> = (a: A) => (b: B) => (c: C) => (d: D) => E
export type Curried3<A, B, C, D> = (a: A) => (b: B) => (c: C) => D
export type Curried2<A, B, C> = (a: A) => (b: B) => C

export type Predicate<A> = (a: A) => boolean

declare export var not: <A>(predicate: Predicate<A>) => Predicate<A>

declare export var or: <A>(p1: Predicate<A>, p2: Predicate<A>) => Predicate<A>

declare export var and: <A>(p1: Predicate<A>, p2: Predicate<A>) => Predicate<A>

export type Endomorphism<A> = (a: A) => A

export type BinaryOperation<A, B> = (a1: A) => (a2: A) => B

export type Kleisli<F, A, B, U, L> = (a: A) => HKT<F, U, L, B>
export type Cokleisli<F, A, B, U, L> = (fa: HKT<F, U, L, A>) => B

declare export var constant: <A>(a: A) => Lazy<A>

declare export var constTrue: () => boolean

declare export var constFalse: () => boolean

declare export var constNull: () => null

declare export var constUndefined: () => void

declare export var identity: <A>(a: A) => A

declare export var flip: <A, B, C>(f: Curried2<A, B, C>) => Curried2<B, A, C>

declare export var on: <A, B, C>(op: BinaryOperation<B, C>) => (f: (a: A) => B) => BinaryOperation<A, C>

declare export function compose<A, B, C, D, E, F, G, H, I, J>(
  ij: (i: I) => J,
  hi: (h: H) => I,
  gh: (g: G) => H,
  fg: (f: F) => G,
  ef: (e: E) => F,
  de: (d: D) => E,
  cd: (c: C) => D,
  bc: (b: B) => C,
  ab: (a: A) => B
): (a: A) => J
declare export function compose<A, B, C, D, E, F, G, H, I>(
  hi: (h: H) => I,
  gh: (g: G) => H,
  fg: (f: F) => G,
  ef: (e: E) => F,
  de: (d: D) => E,
  cd: (c: C) => D,
  bc: (b: B) => C,
  ab: (a: A) => B
): (a: A) => I
declare export function compose<A, B, C, D, E, F, G, H>(
  gh: (g: G) => H,
  fg: (f: F) => G,
  ef: (e: E) => F,
  de: (d: D) => E,
  cd: (c: C) => D,
  bc: (b: B) => C,
  ab: (a: A) => B
): (a: A) => H
declare export function compose<A, B, C, D, E, F, G>(
  fg: (f: F) => G,
  ef: (e: E) => F,
  de: (d: D) => E,
  cd: (c: C) => D,
  bc: (b: B) => C,
  ab: (a: A) => B
): (a: A) => G
declare export function compose<A, B, C, D, E, F>(
  ef: (e: E) => F,
  de: (d: D) => E,
  cd: (c: C) => D,
  bc: (b: B) => C,
  ab: (a: A) => B
): (a: A) => F
declare export function compose<A, B, C, D, E>(
  de: (d: D) => E,
  cd: (c: C) => D,
  bc: (b: B) => C,
  ab: (a: A) => B
): (a: A) => E
declare export function compose<A, B, C, D>(cd: (c: C) => D, bc: (b: B) => C, ab: (a: A) => B): (a: A) => D
declare export function compose<A, B, C>(bc: (b: B) => C, ab: (a: A) => B): (a: A) => C

declare export function pipe<A, B, C, D, E, F, G, H, I, J>(
  ab: (a: A) => B,
  bc: (b: B) => C,
  cd: (c: C) => D,
  de: (d: D) => E,
  ef: (e: E) => F,
  fg: (f: F) => G,
  gh: (g: G) => H,
  hi: (h: H) => I,
  ij: (i: I) => J
): (a: A) => J
declare export function pipe<A, B, C, D, E, F, G, H, I>(
  ab: (a: A) => B,
  bc: (b: B) => C,
  cd: (c: C) => D,
  de: (d: D) => E,
  ef: (e: E) => F,
  fg: (f: F) => G,
  gh: (g: G) => H,
  hi: (h: H) => I
): (a: A) => I
declare export function pipe<A, B, C, D, E, F, G, H>(
  ab: (a: A) => B,
  bc: (b: B) => C,
  cd: (c: C) => D,
  de: (d: D) => E,
  ef: (e: E) => F,
  fg: (f: F) => G,
  gh: (g: G) => H
): (a: A) => H
declare export function pipe<A, B, C, D, E, F, G>(
  ab: (a: A) => B,
  bc: (b: B) => C,
  cd: (c: C) => D,
  de: (d: D) => E,
  ef: (e: E) => F,
  fg: (f: F) => G
): (a: A) => G
declare export function pipe<A, B, C, D, E, F>(
  ab: (a: A) => B,
  bc: (b: B) => C,
  cd: (c: C) => D,
  de: (d: D) => E,
  ef: (e: E) => F
): (a: A) => F
declare export function pipe<A, B, C, D, E>(
  ab: (a: A) => B,
  bc: (b: B) => C,
  cd: (c: C) => D,
  de: (d: D) => E
): (a: A) => E
declare export function pipe<A, B, C, D>(ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): (a: A) => D
declare export function pipe<A, B, C>(ab: (a: A) => B, bc: (b: B) => C): (a: A) => C

declare export var concat: <A>(x: Array<A>, y: Array<A>) => Array<A>

declare export function curry<A, B, C, D, E, F, G, H, I, J>(
  f: Function9<A, B, C, D, E, F, G, H, I, J>
): Curried9<A, B, C, D, E, F, G, H, I, J>
declare export function curry<A, B, C, D, E, F, G, H, I>(
  f: Function8<A, B, C, D, E, F, G, H, I>
): Curried8<A, B, C, D, E, F, G, H, I>
declare export function curry<A, B, C, D, E, F, G, H>(
  f: Function7<A, B, C, D, E, F, G, H>
): Curried7<A, B, C, D, E, F, G, H>
declare export function curry<A, B, C, D, E, F, G>(f: Function6<A, B, C, D, E, F, G>): Curried6<A, B, C, D, E, F, G>
declare export function curry<A, B, C, D, E, F>(f: Function5<A, B, C, D, E, F>): Curried5<A, B, C, D, E, F>
declare export function curry<A, B, C, D, E>(f: Function4<A, B, C, D, E>): Curried4<A, B, C, D, E>
declare export function curry<A, B, C, D>(f: Function3<A, B, C, D>): Curried3<A, B, C, D>
declare export function curry<A, B, C>(f: Function2<A, B, C>): Curried2<A, B, C>

declare export var toString: (x: any) => string

declare export var tuple: <A, B>(a: A, b: B) => [A, B]

declare export var tupleCurried: <A>(a: A) => <B>(b: B) => [A, B]

declare export var apply: <A, B>(f: (a: A) => B) => (a: A) => B

declare export var applyFlipped: <A>(a: A) => <B>(f: (a: A) => B) => B
