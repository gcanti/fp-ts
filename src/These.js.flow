// @flow
import type { HKT } from './HKT'
import type { Applicative } from './Applicative'
import type { Functor } from './Functor'
import type { Bifunctor } from './Bifunctor'
import type { Foldable } from './Foldable'
import type { Traversable } from './Traversable'
import type { Option } from './Option'
import type { Setoid } from './Setoid'
import type { Semigroup } from './Semigroup'
import type { Monad } from './Monad'

export type URIT = <U, L, A>(x: [U, L, A]) => These<L, A>

export type These<L, A> = This<L, A> | That<L, A> | Both<L, A>

declare export class This<L, A> {
  +_tag: 'This';
  +value: L;
  constructor(value: L): These<L, A>;
  map<B>(f: (a: A) => B): These<L, B>;
  bimap<M, B>(f: (l: L) => M, g: (a: A) => B): These<M, B>;
  reduce<B>(f: (b: B, a: A) => B, b: B): B;
  traverse<F>(F: Applicative<F>): <B, U, L>(f: (a: A) => HKT<F, U, L, B>) => HKT<F, U, L, These<L, B>>;
  fold<B>(this_: (l: L) => B, that: (a: A) => B, both: (l: L, a: A) => B): B;
  inspect(): string;
  toString(): string;
  isThis(): boolean;
  isThat(): boolean;
  isBoth(): boolean;
}

declare export class That<L, A> {
  +_tag: 'That';
  +value: A;
  constructor(value: A): That<L, A>;
  map<B>(f: (a: A) => B): These<L, B>;
  bimap<M, B>(f: (l: L) => M, g: (a: A) => B): These<M, B>;
  reduce<B>(f: (b: B, a: A) => B, b: B): B;
  traverse<F>(F: Applicative<F>): <B, U, L>(f: (a: A) => HKT<F, U, L, B>) => HKT<F, U, L, These<L, B>>;
  fold<B>(this_: (l: L) => B, that: (a: A) => B, both: (l: L, a: A) => B): B;
  inspect(): string;
  toString(): string;
  isThis(): boolean;
  isThat(): boolean;
  isBoth(): boolean;
}

declare export class Both<L, A> {
  +_tag: 'Both';
  +l: L;
  +a: A;
  constructor(l: L, a: A): Both<L, A>;
  map<B>(f: (a: A) => B): These<L, B>;
  bimap<M, B>(f: (l: L) => M, g: (a: A) => B): These<M, B>;
  reduce<B>(f: (b: B, a: A) => B, b: B): B;
  traverse<F>(F: Applicative<F>): <B, U, L>(f: (a: A) => HKT<F, U, L, B>) => HKT<F, U, L, These<L, B>>;
  fold<B>(this_: (l: L) => B, that: (a: A) => B, both: (l: L, a: A) => B): B;
  inspect(): string;
  toString(): string;
  isThis(): boolean;
  isThat(): boolean;
  isBoth(): boolean;
}

declare export var fold: <L, A, B>(
  this_: (l: L) => B,
  that: (a: A) => B,
  both: (l: L, a: A) => B
) => (fa: These<L, A>) => B

declare export var getSetoid: <L, A>(SL: Setoid<L>, SA: Setoid<A>) => Setoid<These<L, A>>

declare export var getSemigroup: <L, A>(SL: Semigroup<L>, SA: Semigroup<A>) => Semigroup<These<L, A>>

declare export var of: <L, A>(a: A) => These<L, A>

declare export var getMonad: <L>(S: Semigroup<L>) => Monad<URIT>

declare export var isThis: <L, A>(fa: These<L, A>) => boolean

declare export var isThat: <L, A>(fa: These<L, A>) => boolean

declare export var isBoth: <L, A>(fa: These<L, A>) => boolean

declare export var this_: <L, A>(l: L) => These<L, A>

declare export var that: typeof of

declare export var both: <L, A>(l: L, a: A) => These<L, A>

declare export var fromThese: <L, A>(defaultThis: L, defaultThat: A) => (fa: These<L, A>) => [L, A]

declare export var theseLeft: <L, A>(fa: These<L, A>) => Option<L>

declare export var theseRight: <L, A>(fa: These<L, A>) => Option<A>

export interface Instances extends Functor<URIT>, Bifunctor<URIT>, Foldable<URIT>, Traversable<URIT> {}

declare export var these: Instances
