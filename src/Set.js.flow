// @flow
import type { Setoid } from './Setoid'
import type { Predicate } from './function'
import type { Monoid } from './Monoid'
import type { Semigroup } from './Semigroup'

declare export var toArray: <A>(x: Set<A>) => Array<A>

declare export var getSetoid: <A>(S: Setoid<A>) => Setoid<Set<A>>

declare export var some: <A>(predicate: Predicate<A>) => (x: Set<A>) => boolean

declare export var every: <A>(predicate: Predicate<A>) => (x: Set<A>) => boolean

declare export var subset: <A>(S: Setoid<A>) => (x: Set<A>) => (y: Set<A>) => boolean

declare export var filter: <A>(predicate: Predicate<A>) => (x: Set<A>) => Set<A>

declare export var member: <A>(S: Setoid<A>) => (x: Set<A>) => (a: A) => boolean

declare export var union: <A>(x: Set<A>) => (y: Set<A>) => Set<A>

declare export var intersection: <A>(S: Setoid<A>) => (x: Set<A>) => (y: Set<A>) => Set<A>

declare export var getUnionMonoid: <A>() => Monoid<Set<A>>

declare export var getIntersectionSemigroup: <A>(S: Setoid<A>) => Semigroup<Set<A>>

declare export var reduce: <A, B>(f: (b: B, a: A) => B, b: B, fa: Set<A>) => B

declare export var singleton: <A>(a: A) => Set<A>

declare export var insert: <A>(a: A) => (x: Set<A>) => Set<A>

declare export var remove: <A>(S: Setoid<A>) => (a: A) => (x: Set<A>) => Set<A>
