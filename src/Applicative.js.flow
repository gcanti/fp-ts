// @flow
import type { HKT } from './HKT'
import type { FunctorComposition } from './Functor'
import type { Apply } from './Apply'

export interface Applicative<F> extends Apply<F> {
  of<A, U, L>(a: A): HKT<F, U, L, A>;
}

export interface ApplicativeComposition<F, G> extends FunctorComposition<F, G> {
  of: <A, UF, LF, UG, LG>(a: A) => HKT<F, UF, LF, HKT<G, UG, LG, A>>;
  ap<A, B, UF, LF, UG, LG>(
    fgab: HKT<F, UF, LF, HKT<G, UG, LG, (a: A) => B>>,
    fga: HKT<F, UF, LF, HKT<G, UG, LG, A>>
  ): HKT<F, UF, LF, HKT<G, UG, LG, B>>;
}

declare export var when: <F>(
  F: Applicative<F>
) => <U, L>(condition: boolean, fu: HKT<F, U, L, void>) => HKT<F, U, L, void>

declare export var getApplicativeComposition: <F, G>(
  F: Applicative<F>,
  G: Applicative<G>
) => ApplicativeComposition<F, G>
