// @flow
import type { Monoid } from './Monoid'
import type { Monad } from './Monad'
import type { Lazy } from './function'
import type { Either } from './Either'
import { IO } from './IO'

export type URIT = <U, L, A>(x: [U, L, A]) => Task<A>

declare export class Task<A> {
  +run: Lazy<Promise<A>>;
  constructor(run: Lazy<Promise<A>>): Task<A>;
  map<B>(f: (a: A) => B): Task<B>;
  ap<B>(fab: Task<(a: A) => B>): Task<B>;
  chain<B>(f: (a: A) => Task<B>): Task<B>;
  concat(fy: Task<A>): Task<A>;
  inspect(): string;
  toString(): string;
}

declare export var empty: <A>() => Task<A>

declare export var concat: <A>(fx: Task<A>) => (fy: Task<A>) => Task<A>

declare export var getMonoid: <A>() => Monoid<Task<A>>

declare export var tryCatch: <A>(f: Lazy<Promise<A>>) => <L>(onrejected: (reason: {}) => L) => Task<Either<L, A>>

declare export var fromIO: <A>(io: IO<A>) => Task<A>

export interface Instances extends Monad<URIT> {}

declare export var task: Instances
