// @flow
import type { HKT } from './HKT'
import type { Comonad } from './Comonad'
import type { Functor } from './Functor'
import type { Endomorphism } from './function'

export type URIT = <U, L, A>(x: [U, L, A]) => Store<L, A>

declare export class Store<S, A> {
  +peek: (s: S) => A;
  +pos: S;
  constructor(peek: (s: S) => A, pos: S): Store<S, A>;
  seek(s: S): Store<S, A>;
  map<B>(f: (a: A) => B): Store<S, B>;
  extract(): A;
  extend<B>(f: (sa: Store<S, A>) => B): Store<S, B>;
  inspect(): string;
  toString(): string;
}

declare export var peek: <S, A>(sa: Store<S, A>) => (s: S) => A

declare export var peeks: <S, A>(f: Endomorphism<S>) => (sa: Store<S, A>) => (s: S) => A

declare export var seek: <S, A>(s: S) => (sa: Store<S, A>) => Store<S, A>

declare export var seeks: <S, A>(f: Endomorphism<S>) => (sa: Store<S, A>) => Store<S, A>

declare export var experiment: <F, S, A, U, L>(
  F: Functor<F>
) => (f: (s: S) => HKT<F, U, L, S>) => (sa: Store<S, A>) => HKT<F, U, L, A>

export interface Instances extends Comonad<URIT> {}

declare export var store: Instances
