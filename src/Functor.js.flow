// @flow
import type { HKT } from './HKT'

export interface Functor<F> {
  map<A, B, U, L>(f: (a: A) => B, fa: HKT<F, U, L, A>): HKT<F, U, L, B>;
}

export interface FunctorComposition<F, G> {
  map<A, B, UF, LF, UG, LG>(f: (a: A) => B, fa: HKT<F, UF, LF, HKT<G, UG, LG, A>>): HKT<F, UF, LF, HKT<G, UG, LG, B>>;
}

declare export var lift: <F, A, B, U, L>(F: Functor<F>) => (f: (a: A) => B) => (fa: HKT<F, U, L, A>) => HKT<F, U, L, B>

declare export var voidRight: <F, A, B, U, L>(F: Functor<F>) => (a: A) => (fb: HKT<F, U, L, B>) => HKT<F, U, L, A>

declare export var voidLeft: <F, A, B, U, L>(F: Functor<F>) => (fa: HKT<F, U, L, A>) => (b: B) => HKT<F, U, L, B>

declare export var flap: <F, A, B, U, L>(
  functor: Functor<F>
) => (ff: HKT<F, U, L, (a: A) => B>) => (a: A) => HKT<F, U, L, B>

declare export var getFunctorComposition: <F, G>(F: Functor<F>, G: Functor<G>) => FunctorComposition<F, G>
