// @flow
import type { HKT } from './HKT'
import type { Monad } from './Monad'
import type { NaturalTransformation } from './NaturalTransformation'

export type Free<F, A> = Pure<F, A> | Impure<F, A, any>

declare export class Pure<F, A> {
  +_tag: 'Pure';
  +value: A;
  constructor(value: A): Pure<F, A>;
  map<B>(f: (a: A) => B): Free<F, B>;
  ap<B>(fab: Free<F, (a: A) => B>): Free<F, B>;
  chain<B>(f: (a: A) => Free<F, B>): Free<F, B>;
  foldFree<M, U, L>(M: Monad<M>): (f: <A>(fa: HKT<F, U, L, A>) => HKT<M, U, L, A>) => HKT<M, U, L, A>;
  inspect(): string;
  toString(): string;
}

declare export class Impure<F, A, X> {
  +_tag: 'Impure';
  +fx: HKT<F, X>;
  +f: (x: X) => Free<F, A>;
  constructor(fx: HKT<F, X>, f: (x: X) => Free<F, A>): Impure<F, A, X>;
  map<B>(f: (a: A) => B): Free<F, B>;
  ap<B>(fab: Free<F, (a: A) => B>): Free<F, B>;
  chain<B>(f: (a: A) => Free<F, B>): Free<F, B>;
  foldFree<M, U, L>(M: Monad<M>): (f: <A>(fa: HKT<F, U, L, A>) => HKT<M, U, L, A>) => HKT<M, U, L, A>;
  inspect(): string;
  toString(): string;
}

declare export var of: <F, A>(a: A) => Free<F, A>

declare export var liftF: <F, A>(fa: HKT<F, A>) => Free<F, A>

declare export var substFree: <F, G>(f: <A>(fa: HKT<F, A>) => Free<G, A>) => <A>(fa: Free<F, A>) => Free<G, A>

declare export var hoistFree: <F, G>(
  nt: <U, L, A>(fa: HKT<F, U, L, A>) => HKT<G, A>
) => <A>(fa: Free<F, A>) => Free<G, A>

declare export var foldFree: <M>(
  M: Monad<M>
) => <F>(f: <A>(fa: HKT<F, A>) => HKT<M, A>) => <U, L, A>(fa: Free<F, A>) => HKT<M, U, L, A>
