// @flow
import type { Monoid } from './Monoid'
import type { Applicative } from './Applicative'
import type { Monad } from './Monad'
import type { Foldable } from './Foldable'
import type { Unfoldable } from './Unfoldable'
import type { Traversable } from './Traversable'
import type { Alternative } from './Alternative'
import type { Plus } from './Plus'
import type { Option } from './Option'
import type { Ord } from './Ord'
import type { Extend } from './Extend'
import type { Predicate, Lazy, Endomorphism } from './function'
import type { Either } from './Either'
import type { Semigroup } from './Semigroup'

export type URIT = <U, L, A>(x: [U, L, A]) => Array<A>

declare export var getSemigroup: <A>() => Semigroup<Array<A>>

declare export var getMonoid: <A>() => Monoid<Array<A>>

declare export var partitionMap: <A, L, R>(
  f: (a: A) => Either<L, R>,
  fa: Array<A>
) => { left: Array<L>, right: Array<R> }

declare export var flatten: <A>(ffa: Array<Array<A>>) => Array<A>

declare export var fold: <A, B>(nil: Lazy<B>, cons: (head: A, tail: Array<A>) => B, as: Array<A>) => B

declare export var length: <A>(as: Array<A>) => number

declare export var isEmpty: <A>(as: Array<A>) => boolean

declare export var isOutOfBound: (i: number) => <A>(as: Array<A>) => boolean

declare export var index: (i: number) => <A>(as: Array<A>) => Option<A>

declare export var cons: <A>(a: A) => (as: Array<A>) => Array<A>

declare export var snoc: <A>(as: Array<A>) => (a: A) => Array<A>

declare export var head: <A>(as: Array<A>) => Option<A>

declare export var last: <A>(as: Array<A>) => Option<A>

declare export var tail: <A>(as: Array<A>) => Option<Array<A>>

declare export var slice: (start: number, end: number) => <A>(as: Array<A>) => Array<A>

declare export var init: <A>(as: Array<A>) => Option<Array<A>>

declare export var take: (n: number) => <A>(as: Array<A>) => Array<A>

declare export var span: <A>(predicate: Predicate<A>) => (as: Array<A>) => { init: Array<A>, rest: Array<A> }

declare export var takeWhile: <A>(predicate: Predicate<A>) => (as: Array<A>) => Array<A>

declare export var drop: (n: number) => <A>(as: Array<A>) => Array<A>

declare export var dropWhile: <A>(predicate: Predicate<A>) => (as: Array<A>) => Array<A>

declare export var findIndex: <A>(predicate: Predicate<A>) => (as: Array<A>) => Option<number>

declare export var findFirst: <A>(predicate: Predicate<A>) => (as: Array<A>) => Option<A>

declare export var findLast: <A>(predicate: Predicate<A>) => (as: Array<A>) => Option<A>

declare export var filter: <A>(predicate: Predicate<A>) => (as: Array<A>) => Array<A>

declare export var copy: <A>(as: Array<A>) => Array<A>

declare export var unsafeInsertAt: (i: number) => <A>(a: A) => (as: Array<A>) => Array<A>

declare export var insertAt: (i: number) => <A>(a: A) => (as: Array<A>) => Option<Array<A>>

declare export var unsafeUpdateAt: (i: number) => <A>(a: A) => (as: Array<A>) => Array<A>

declare export var updateAt: (i: number) => <A>(a: A) => (as: Array<A>) => Option<Array<A>>

declare export var unsafeDeleteAt: (i: number) => <A>(as: Array<A>) => Array<A>

declare export var deleteAt: (i: number) => <A>(as: Array<A>) => Option<Array<A>>

declare export var modifyAt: (i: number) => <A>(f: Endomorphism<A>) => (as: Array<A>) => Option<Array<A>>

declare export var reverse: <A>(as: Array<A>) => Array<A>

declare export var mapOption: <A, B>(f: (a: A) => Option<B>) => (as: Array<A>) => Array<B>

declare export var catOptions: <A>(as: Array<Option<A>>) => Array<A>

declare export var rights: <L, A>(as: Array<Either<L, A>>) => Array<A>

declare export var lefts: <L, A>(as: Array<Either<L, A>>) => Array<L>

declare export var sort: <A>(ord: Ord<A>) => (as: Array<A>) => Array<A>

declare export var zipWith: <A, B, C>(f: (a: A, b: B) => C) => (fa: Array<A>) => (fb: Array<B>) => Array<C>

declare export var zip: <A>(fa: Array<A>) => <B>(fb: Array<B>) => Array<[A, B]>

declare export var rotate: (n: number) => <A>(xs: Array<A>) => Array<A>

export interface Instances
  extends Monad<URIT>, Foldable<URIT>, Unfoldable<URIT>, Traversable<URIT>, Alternative<URIT>, Plus<URIT>, Extend<
    URIT
  > {}

declare export var array: Instances
