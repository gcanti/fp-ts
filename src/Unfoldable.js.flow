// @flow
import type { HKT } from './HKT'
import type { Applicative } from './Applicative'
import type { Traversable } from './Traversable'
import type { Option } from './Option'

export interface Unfoldable<F> {
  unfoldr<A, B, U, L>(f: (b: B) => Option<[A, B]>, b: B): HKT<F, U, L, A>;
}

declare export var replicate: <F>(unfoldable: Unfoldable<F>) => (n: number) => <A, U, L>(a: A) => HKT<F, U, L, A>

declare export var none: <F, A, U, L>(unfoldable: Unfoldable<F>) => HKT<F, U, L, A>

declare export var singleton: <F>(unfoldable: Unfoldable<F>) => <A, U, L>(a: A) => HKT<F, U, L, A>

declare export var replicateA: <F, T>(
  applicative: Applicative<F>,
  unfoldableTraversable: Unfoldable<T> & Traversable<T>
) => (n: number) => <A, UF, LF, UT, LT>(ma: HKT<F, UF, LF, A>) => HKT<F, UF, LF, HKT<T, UT, LT, A>>
