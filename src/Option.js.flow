// @flow
import type { HKT } from './HKT'
import type { Setoid } from './Setoid'
import type { Semigroup } from './Semigroup'
import type { Applicative } from './Applicative'
import type { Monoid } from './Monoid'
import type { Monad } from './Monad'
import type { Foldable } from './Foldable'
import type { Plus } from './Plus'
import type { Traversable } from './Traversable'
import type { Alternative } from './Alternative'
import type { Extend } from './Extend'
import type { Lazy, Predicate } from './function'

export type URIT = <U, L, A>(x: [U, L, A]) => Option<A>

export type Option<A> = None<A> | Some<A>

declare export class None<A> {
  static value: Option<any>;
  +_tag: 'None';
  constructor(): None<A>;
  map<B>(f: (a: A) => B): Option<B>;
  mapNullable<B>(f: (a: A) => B | null | void): Option<$NonMaybeType<B>>;
  ap<B>(fab: Option<(a: A) => B>): Option<B>;
  chain<B>(f: (a: A) => Option<B>): Option<B>;
  reduce<B>(f: (b: B, a: A) => B, b: B): B;
  traverse<F>(F: Applicative<F>): <B, U, L>(f: (a: A) => HKT<F, U, L, B>) => HKT<F, U, L, Option<B>>;
  alt(fa: Option<A>): Option<A>;
  extend<B>(f: (ea: Option<A>) => B): Option<B>;
  fold<B>(n: () => B, s: (a: A) => B): B;
  getOrElseValue(a: A): A;
  getOrElse(f: () => A): A;
  toNullable(): A | null;
  toUndefined(): A | void;
  inspect(): string;
  toString(): string;
  contains(S: Setoid<A>, a: A): boolean;
  isNone(): boolean;
  isSome(): boolean;
  exists(p: Predicate<A>): boolean;
  filter(p: Predicate<A>): Option<A>;
}

declare export class Some<A> {
  +_tag: 'Some';
  +value: A;
  constructor(value: A): Some<A>;
  map<B>(f: (a: A) => B): Option<B>;
  mapNullable<B>(f: (a: A) => B | null | void): Option<$NonMaybeType<B>>;
  ap<B>(fab: Option<(a: A) => B>): Option<B>;
  chain<B>(f: (a: A) => Option<B>): Option<B>;
  reduce<B>(f: (b: B, a: A) => B, b: B): B;
  traverse<F>(F: Applicative<F>): <B, U, L>(f: (a: A) => HKT<F, U, L, B>) => HKT<F, U, L, Option<B>>;
  alt(fa: Option<A>): Option<A>;
  extend<B>(f: (ea: Option<A>) => B): Option<B>;
  fold<B>(n: () => B, s: (a: A) => B): B;
  getOrElseValue(a: A): A;
  getOrElse(f: () => A): A;
  toNullable(): A | null;
  toUndefined(): A | void;
  inspect(): string;
  toString(): string;
  contains(S: Setoid<A>, a: A): boolean;
  isNone(): boolean;
  isSome(): boolean;
  exists(p: Predicate<A>): boolean;
  filter(p: Predicate<A>): Option<A>;
}

declare export var fold: <A, B>(n: Lazy<B>, s: (a: A) => B) => (fa: Option<A>) => B

declare export var getSetoid: <A>(S: Setoid<A>) => Setoid<Option<A>>

declare export var mapNullable: <A, B>(f: (a: A) => B | null | void, fa: Option<A>) => Option<$NonMaybeType<B>>

declare export var filter: <A>(p: Predicate<A>) => (fa: Option<A>) => Option<A>

declare export var extend: <A, B>(f: (ea: Option<A>) => B, ea: Option<A>) => Option<B>

declare export var empty: <A>() => Option<A>

declare export var getFirstMonoid: <A>() => Monoid<Option<A>>

declare export var getLastMonoid: <A>() => Monoid<Option<A>>

declare export var getSemigroup: <A>(S: Semigroup<A>) => Semigroup<Option<A>>

declare export var getMonoid: <A>(S: Semigroup<A>) => Monoid<Option<A>>

declare export var isSome: <A>(fa: Option<A>) => boolean

declare export var isNone: <A>(fa: Option<A>) => boolean

declare export var getOrElseValue: <A>(a: A) => (fa: Option<A>) => A

declare export var getOrElse: <A>(f: Lazy<A>) => (fa: Option<A>) => A

declare export var toNullable: <A>(fa: Option<A>) => A | null

declare export var toUndefined: <A>(fa: Option<A>) => A | void

declare export var fromNullable: <A>(a: A | null | void) => Option<$NonMaybeType<A>>

declare export var none: Option<any>

declare export var some: <A>(a: A) => Option<A>

declare export var fromPredicate: <A>(predicate: (a: A) => boolean) => (a: A) => Option<A>

declare export var tryCatch: <A>(f: Lazy<A>) => Option<A>

export interface Instances
  extends Monad<URIT>, Foldable<URIT>, Plus<URIT>, Traversable<URIT>, Alternative<URIT>, Extend<URIT> {}

declare export var option: Instances
