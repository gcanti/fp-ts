// @flow
import type { HKT } from './HKT'
import type { Setoid } from './Setoid'
import type { Ord } from './Ord'
import type { Semigroup } from './Semigroup'
import type { Monoid } from './Monoid'
import type { Bifunctor } from './Bifunctor'
import type { Comonad } from './Comonad'
import type { Apply } from './Apply'
import type { Monad } from './Monad'
import type { Foldable } from './Foldable'
import type { Applicative } from './Applicative'
import type { Traversable } from './Traversable'
import type { Semigroupoid } from './Semigroupoid'
import type { ChainRec } from './ChainRec'
import type { Chain } from './Chain'
import type { Either } from './Either'

export type URIT = <U, L, A>(x: [U, L, A]) => Tuple<L, A>

declare export class Tuple<L, A> {
  +value: [L, A];
  constructor(value: [L, A]): Tuple<L, A>;
  fst(): L;
  snd(): A;
  compose<B>(ab: Tuple<A, B>): Tuple<L, B>;
  map<B>(f: (a: A) => B): Tuple<L, B>;
  bimap<M, B>(f: (l: L) => M, g: (a: A) => B): Tuple<M, B>;
  extract(): A;
  extend<B>(f: (fa: Tuple<L, A>) => B): Tuple<L, B>;
  reduce<B>(f: (c: B, b: A) => B, c: B): B;
  traverse<F>(F: Applicative<F>): <B, U, L>(f: (a: A) => HKT<F, U, L, B>) => HKT<F, U, L, Tuple<L, B>>;
  inspect(): string;
  toString(): string;
}

declare export var fst: <L, A>(fa: Tuple<L, A>) => L

declare export var snd: <L, A>(fa: Tuple<L, A>) => A

declare export var getSetoid: <L, A>(SA: Setoid<L>, SB: Setoid<A>) => Setoid<Tuple<L, A>>

declare export var getOrd: <L, A>(OL: Ord<L>, OA: Ord<A>) => Ord<Tuple<L, A>>

declare export var getSemigroup: <L, A>(SL: Semigroup<L>, SA: Semigroup<A>) => Semigroup<Tuple<L, A>>

declare export var getMonoid: <L, A>(ML: Monoid<L>, MA: Monoid<A>) => Monoid<Tuple<L, A>>

declare export var getApply: <L>(S: Semigroup<L>) => Apply<URIT>

declare export var getApplicative: <L>(M: Monoid<L>) => Applicative<URIT>

declare export var getChain: <L>(M: Monoid<L>) => Chain<URIT>

declare export var getMonad: <L>(M: Monoid<L>) => Monad<URIT>

declare export var getChainRec: <L>(M: Monoid<L>) => ChainRec<URIT>

declare export var swap: <L, A>(fa: Tuple<L, A>) => Tuple<A, L>

export interface Instances
  extends Semigroupoid<URIT>, Bifunctor<URIT>, Comonad<URIT>, Foldable<URIT>, Traversable<URIT> {}

declare export var writer: Instances
