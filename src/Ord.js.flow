// @flow
import type { Ordering } from './Ordering'
import type { Setoid } from './Setoid'
import type { Semigroup } from './Semigroup'

export interface Ord<A> extends Setoid<A> {
  compare(x: A): (y: A) => Ordering;
}

declare export var toNativeComparator: <A>(compare: (x: A) => (y: A) => Ordering) => (x: A, y: A) => number

declare export var unsafeCompare: (x: any) => (y: any) => Ordering

declare export var ordString: Ord<string>

declare export var ordNumber: Ord<number>

declare export var ordBoolean: Ord<boolean>

declare export var lessThan: <A>(ord: Ord<A>) => (x: A) => (y: A) => boolean

declare export var greaterThan: <A>(ord: Ord<A>) => (x: A) => (y: A) => boolean

declare export var lessThanOrEq: <A>(ord: Ord<A>) => (x: A) => (y: A) => boolean

declare export var greaterThanOrEq: <A>(ord: Ord<A>) => (x: A) => (y: A) => boolean

declare export var min: <A>(ord: Ord<A>) => (x: A) => (y: A) => A

declare export var max: <A>(ord: Ord<A>) => (x: A) => (y: A) => A

declare export var clamp: <A>(ord: Ord<A>) => (low: A) => (hi: A) => (x: A) => A

declare export var between: <A>(ord: Ord<A>) => (low: A) => (hi: A) => (x: A) => boolean

declare export var fromCompare: <A>(compare: (x: A) => (y: A) => Ordering) => Ord<A>

declare export var contramap: <A, B>(f: (b: B) => A, fa: Ord<A>) => Ord<B>

declare export var getSemigroup: <A>() => Semigroup<Ord<A>>

declare export var getProductOrd: <A, B>(OA: Ord<A>, OB: Ord<B>) => Ord<[A, B]>
