// @flow
import type { HKT } from './HKT'
import type { Monad } from './Monad'
import type { Comonad } from './Comonad'
import type { Semigroup } from './Semigroup'
import type { Foldable } from './Foldable'
import type { Applicative } from './Applicative'
import type { Traversable } from './Traversable'
import type { Option } from './Option'

export type URIT = <U, L, A>(x: [U, L, A]) => NonEmptyArray<A>

declare export class NonEmptyArray<A> {
  +head: A;
  +tail: Array<A>;
  constructor(head: A, tail: Array<A>): NonEmptyArray<A>;
  toArray(): Array<A>;
  concatArray(as: Array<A>): NonEmptyArray<A>;
  map<B>(f: (a: A) => B): NonEmptyArray<B>;
  ap<B>(fab: NonEmptyArray<(a: A) => B>): NonEmptyArray<B>;
  chain<B>(f: (a: A) => NonEmptyArray<B>): NonEmptyArray<B>;
  concat(y: NonEmptyArray<A>): NonEmptyArray<A>;
  reduce<B>(f: (b: B, a: A) => B, b: B): B;
  traverse<F>(applicative: Applicative<F>): <B, U, L>(f: (a: A) => HKT<F, U, L, B>) => HKT<F, U, L, NonEmptyArray<B>>;
  extend<B>(f: (fa: NonEmptyArray<A>) => B): NonEmptyArray<B>;
  extract(): A;
  inspect(): string;
  toString(): string;
}

declare export var fromArray: <A>(as: Array<A>) => Option<NonEmptyArray<A>>

declare export var getSemigroup: <A>() => Semigroup<NonEmptyArray<A>>

export interface Instances extends Monad<URIT>, Comonad<URIT>, Foldable<URIT>, Traversable<URIT> {}

declare export var nonEmptyArray: Instances
