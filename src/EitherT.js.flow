// @flow
import type { HKT } from './HKT'
import type { Functor } from './Functor'
import type { Monad } from './Monad'
import type { ApplicativeComposition } from './Applicative'
import type { Either, URIT } from './Either'
import type { Option } from './Option'
import type { Applicative } from './Applicative'

export interface EitherT<F> extends ApplicativeComposition<F, URIT> {
  chain<L, A, B, UF, LF>(
    f: (a: A) => HKT<F, UF, LF, Either<L, B>>,
    fa: HKT<F, UF, LF, Either<L, A>>
  ): HKT<F, UF, LF, Either<L, B>>;
}

declare export var chain: <F>(
  F: Monad<F>
) => <L, A, B, UF, LF>(
  f: (a: A) => HKT<F, UF, LF, Either<L, B>>,
  fa: HKT<F, UF, LF, Either<L, A>>
) => HKT<F, UF, LF, Either<L, B>>

declare export var right: <F>(F: Functor<F>) => <A, L, UF, LF>(fa: HKT<F, UF, LF, A>) => HKT<F, UF, LF, Either<L, A>>

declare export var left: <F>(F: Functor<F>) => <A, L, UF, LF>(fl: HKT<F, UF, LF, L>) => HKT<F, UF, LF, Either<L, A>>

declare export var fromEither: <F>(
  F: Applicative<F>
) => <L, A, UF, LF>(fa: Either<L, A>) => HKT<F, UF, LF, Either<L, A>>

declare export var fold: <F>(
  F: Functor<F>
) => <R, L, A, UF, LF>(left: (l: L) => R, right: (a: A) => R, fa: HKT<F, UF, LF, Either<L, A>>) => HKT<F, UF, LF, R>

declare export var mapLeft: <F>(
  F: Functor<F>
) => <N, L, UF, LF>(f: (l: L) => N) => <A>(fa: HKT<F, UF, LF, Either<L, A>>) => HKT<F, UF, LF, Either<N, A>>

declare export var toOption: <F>(
  F: Functor<F>
) => <L, A, UF, LF>(fa: HKT<F, UF, LF, Either<L, A>>) => HKT<F, UF, LF, Option<A>>

declare export var getEitherT: <M>(M: Monad<M>) => EitherT<M>
