// @flow
import type { HKT } from './HKT'
import type { Functor } from './Functor'
import type { Applicative } from './Applicative'

export interface Monoidal<F> extends Functor<F> {
  unit<U, L>(): HKT<F, U, L, void>;
  mult<A, B, U, L>(fa: HKT<F, U, L, A>, fb: HKT<F, U, L, B>): HKT<F, U, L, [A, B]>;
}

declare export var fromApplicative: <F>(applicative: Applicative<F>) => Monoidal<F>

declare export var toApplicative: <F>(monoidal: Monoidal<F>) => Applicative<F>
