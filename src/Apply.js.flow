// @flow
import type { HKT } from './HKT'
import type { Functor } from './Functor'
import type { Curried2, Curried3, Curried4 } from './function'

export interface Apply<F> extends Functor<F> {
  ap<A, B, U, L>(fab: HKT<F, U, L, (a: A) => B>, fa: HKT<F, U, L, A>): HKT<F, U, L, B>;
}

declare export function applyFirst<F, A, U, L>(
  apply: Apply<F>
): (fa: HKT<F, U, L, A>) => <B>(fb: HKT<F, U, L, B>) => HKT<F, U, L, A>

declare export function applySecond<F, A, U, L>(
  apply: Apply<F>
): (fa: HKT<F, U, L, A>) => <B>(fb: HKT<F, U, L, B>) => HKT<F, U, L, B>

declare export function liftA2<F>(
  apply: Apply<F>
): <A, B, C, U, L>(f: Curried2<A, B, C>) => Curried2<HKT<F, U, L, A>, HKT<F, U, L, B>, HKT<F, U, L, C>>

declare export function liftA3<F>(
  apply: Apply<F>
): <A, B, C, D, U, L>(
  f: Curried3<A, B, C, D>
) => Curried3<HKT<F, U, L, A>, HKT<F, U, L, B>, HKT<F, U, L, C>, HKT<F, U, L, D>>

declare export function liftA4<F>(
  apply: Apply<F>
): <A, B, C, D, E, U, L>(
  f: Curried4<A, B, C, D, E>
) => Curried4<HKT<F, U, L, A>, HKT<F, U, L, B>, HKT<F, U, L, C>, HKT<F, U, L, D>, HKT<F, U, L, E>>
