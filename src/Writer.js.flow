// @flow
import type { Monoid } from './Monoid'
import type { Functor } from './Functor'
import type { Monad } from './Monad'
import type { Lazy } from './function'

export type URIT = <U, L, A>(x: [U, L, A]) => Writer<L, A>

declare export class Writer<W, A> {
  +monoid: Monoid<W>;
  +run: Lazy<[A, W]>;
  constructor(monoid: Monoid<W>, run: Lazy<[A, W]>): Writer<W, A>;
  eval(): A;
  exec(): W;
  map<B>(f: (a: A) => B): Writer<W, B>;
  ap<B>(fab: Writer<W, (a: A) => B>): Writer<W, B>;
  chain<B>(f: (a: A) => Writer<W, B>): Writer<W, B>;
}

declare export var tell: <W>(M: Monoid<W>) => (w: W) => Writer<W, void>

declare export var getMonad: <W>(M: Monoid<W>) => Monad<URIT>

export interface Instances extends Functor<URIT> {}

declare export var writer: Instances
