{
  "type": "module",
  "module": "Task",
  "types": [
    {
      "type": "type",
      "name": "URI",
      "signature": "type URI = 'Task'"
    }
  ],
  "datas": [
    {
      "type": "data",
      "name": "Task",
      "signature": "class Task<A> {\n  constructor(readonly run: Lazy<Promise<A>>)\n}",
      "description": null,
      "instances": [
        {
          "type": "instance",
          "name": "Monad",
          "signature": null,
          "description": null
        },
        {
          "type": "instance",
          "name": "Monoid",
          "signature": null,
          "description": null
        }
      ],
      "methods": [
        {
          "type": "method",
          "name": "map",
          "signature": "<B>(f: (a: A) => B): Task<B>",
          "description": null
        },
        {
          "type": "method",
          "name": "ap",
          "signature": "<B>(fab: Task<(a: A) => B>): Task<B>",
          "description": null
        },
        {
          "type": "method",
          "name": "ap_",
          "signature": "<B, C>(this: Task<(a: B) => C>, fb: Task<B>): Task<C>",
          "description": null
        },
        {
          "type": "method",
          "name": "chain",
          "signature": "<B>(f: (a: A) => Task<B>): Task<B>",
          "description": null
        },
        {
          "type": "method",
          "name": "concat",
          "signature": "(fy: Task<A>): Task<A>",
          "description": null
        }
      ]
    }
  ],
  "functions": [
    {
      "type": "function",
      "name": "tryCatch",
      "signature": "<A>(f: Lazy<Promise<A>>) => <L>(onrejected: (reason: {}) => L): Task<Either<L, A>>",
      "description": null
    }
  ],
  "consts": []
}
