{
  "type": "module",
  "module": "Array",
  "types": [
    {
      "type": "type",
      "name": "URI",
      "signature": "type URI = 'Array'"
    }
  ],
  "datas": [
    {
      "type": "data",
      "name": "Array",
      "signature": "Array<A>",
      "description": null,
      "instances": [
        {
          "type": "instance",
          "name": "Monad",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Foldable",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Unfoldable",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Traversable",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Alternative",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Plus",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Extend",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Filterable",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        },
        {
          "type": "instance",
          "name": "Witherable",
          "signature": "getSetoid = <A>(S: Setoid<A>): Setoid<Option<A>>",
          "description": null
        }
      ],
      "methods": []
    }
  ],
  "functions": [
    {
      "type": "function",
      "name": "fold",
      "signature": "<A, B>(nil: Lazy<B>, cons: (head: A, tail: Array<A>) => B, as: Array<A>): B",
      "description": "Break an array into its first element and remaining elements"
    },
    {
      "type": "function",
      "name": "length",
      "signature": "<A>(as: Array<A>): number",
      "description": "Get the number of elements in an array"
    },
    {
      "type": "function",
      "name": "isEmpty",
      "signature": "<A>(as: Array<A>): boolean",
      "description": "Test whether an array is empty"
    },
    {
      "type": "function",
      "name": "isOutOfBound",
      "signature": "(i: number) => <A>(as: Array<A>): boolean",
      "description": "Test whether an array contains a particular index"
    },
    {
      "type": "function",
      "name": "index",
      "signature": "(i: number) => <A>(as: Array<A>): Option<A>",
      "description": "This function provides a safe way to read a value at a particular index from an array"
    },
    {
      "type": "function",
      "name": "cons",
      "signature": "<A>(a: A) => (as: Array<A>): Array<A>",
      "description": "Attaches an element to the front of an array, creating a new array"
    },
    {
      "type": "function",
      "name": "snoc",
      "signature": "<A>(as: Array<A>) => (a: A): Array<A>",
      "description": "Append an element to the end of an array, creating a new array"
    },
    {
      "type": "function",
      "name": "head",
      "signature": "<A>(as: Array<A>): Option<A>",
      "description": "Get the first element in an array, or `None` if the array is empty"
    },
    {
      "type": "function",
      "name": "last",
      "signature": "<A>(as: Array<A>): Option<A>",
      "description": "Get the last element in an array, or `None` if the array is empty"
    },
    {
      "type": "function",
      "name": "tail",
      "signature": "<A>(as: Array<A>): Option<Array<A>>",
      "description": "Get all but the first element of an array, creating a new array, or `None` if the array is empty"
    },
    {
      "type": "function",
      "name": "slice",
      "signature": "(start: number, end: number) => <A>(as: Array<A>): Array<A>",
      "description": "Extract a subarray by a start and end index"
    },
    {
      "type": "function",
      "name": "init",
      "signature": "<A>(as: Array<A>): Option<Array<A>>",
      "description": "Get all but the last element of an array, creating a new array, or `None` if the array is empty"
    },
    {
      "type": "function",
      "name": "take",
      "signature": "(n: number) => <A>(as: Array<A>): Array<A>",
      "description": "Keep only a number of elements from the start of an array, creating a new array"
    },
    {
      "type": "function",
      "name": "takeWhile",
      "signature": "<A>(predicate: Predicate<A>) => (as: Array<A>): Array<A>",
      "description":
        "Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new array"
    },
    {
      "type": "function",
      "name": "drop",
      "signature": "(n: number) => <A>(as: Array<A>): Array<A>",
      "description": "Drop a number of elements from the start of an array, creating a new array"
    },
    {
      "type": "function",
      "name": "dropWhile",
      "signature": "<A>(predicate: Predicate<A>) => (as: Array<A>): Array<A>",
      "description":
        "Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new array"
    },
    {
      "type": "function",
      "name": "findIndex",
      "signature": "<A>(predicate: Predicate<A>) => (as: Array<A>): Option<number>",
      "description": "Find the first index for which a predicate holds"
    },
    {
      "type": "function",
      "name": "filter",
      "signature": "<A>(predicate: Predicate<A>) => (as: Array<A>): Array<A>",
      "description": "Filter an array, keeping the elements which satisfy a predicate function, creating a new array"
    },
    {
      "type": "function",
      "name": "refine",
      "signature": "<A>(as: Array<A>) => <B extends A>(refinement: Refinement<A, B>): Array<B>",
      "description": null
    },
    {
      "type": "function",
      "name": "copy",
      "signature": "<A>(as: Array<A>): Array<A>",
      "description": null
    },
    {
      "type": "function",
      "name": "unsafeInsertAt",
      "signature": "(i: number) => <A>(a: A) => (as: Array<A>): Array<A>",
      "description": null
    },
    {
      "type": "function",
      "name": "insertAt",
      "signature": "(i: number) => <A>(a: A) => (as: Array<A>): Option<Array<A>>",
      "description":
        "Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds"
    },
    {
      "type": "function",
      "name": "unsafeUpdateAt",
      "signature": "(i: number) => <A>(a: A) => (as: Array<A>): Array<A>",
      "description": null
    },
    {
      "type": "function",
      "name": "updateAt",
      "signature": "(i: number) => <A>(a: A) => (as: Array<A>): Option<Array<A>>",
      "description":
        "Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds"
    },
    {
      "type": "function",
      "name": "unsafeDeleteAt",
      "signature": "(i: number) => <A>(as: Array<A>): Array<A>",
      "description": null
    },
    {
      "type": "function",
      "name": "deleteAt",
      "signature": "(i: number) => <A>(as: Array<A>): Option<Array<A>>",
      "description":
        "Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds"
    },
    {
      "type": "function",
      "name": "modifyAt",
      "signature": "(i: number) => <A>(f: Endomorphism<A>) => (as: Array<A>): Option<Array<A>>",
      "description":
        "Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out of bounds"
    },
    {
      "type": "function",
      "name": "reverse",
      "signature": "<A>(as: Array<A>): Array<A>",
      "description": "Reverse an array, creating a new array"
    },
    {
      "type": "function",
      "name": "mapOption",
      "signature": "<A, B>(f: (a: A) => Option<B>) => (as: Array<A>): Array<B>",
      "description":
        "Apply a function to each element in an array, keeping only the results which contain a value, creating a new array"
    },
    {
      "type": "function",
      "name": "catOptions",
      "signature": "<A>(as: Array<Option<A>>): Array<A>",
      "description":
        "Filter an array of optional values, keeping only the elements which contain a value, creating a new array"
    },
    {
      "type": "function",
      "name": "sort",
      "signature": "<A>(ord: Ord<A>) => (as: Array<A>): Array<A>",
      "description": "Sort the elements of an array in increasing order, creating a new array"
    },
    {
      "type": "function",
      "name": "zipWith",
      "signature": "<A, B, C>(f: (a: A, b: B) => C) => (fa: Array<A>) => (fb: Array<B>): Array<C>",
      "description":
        "Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one input array is short, excess elements of the longer array are discarded"
    },
    {
      "type": "function",
      "name": "zip",
      "signature": "<A>(fa: Array<A>) => <B>(fb: Array<B>): Array<[A, B]>",
      "description":
        "Takes two arrays and returns an array of corresponding pairs. If one input array is short, excess elements of the longer array are discarded"
    },
    {
      "type": "function",
      "name": "span",
      "signature": "<A>(predicate: Predicate<A>) => (as: Array<A>): { init: Array<A>; rest: Array<A> }",
      "description":
        "Split an array into two parts:\n1. the longest initial subarray for which all elements satisfy the specified predicate\n2. the remaining elements"
    }
  ],
  "consts": []
}
