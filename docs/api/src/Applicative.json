{
  "type": "module",
  "module": "Applicative",
  "types": [
    {
      "type": "type",
      "name": "Applicative",
      "signature": "interface Applicative<F> extends Apply<F> {\n  of: <A>(a: A) => HKT<F, A>\n}"
    },
    {
      "type": "type",
      "name": "FantasyApplicative",
      "signature": "interface FantasyApplicative<F, A> extends FantasyApply<F, A> {}"
    },
    {
      "type": "type",
      "name": "ApplicativeComposition",
      "signature":
        "interface ApplicativeComposition<F, G> extends FunctorComposition<F, G> {\n  of: <A>(a: A) => HKT<F, HKT<G, A>>\n  ap: <A, B>(fgab: HKT<F, HKT<G, (a: A) => B>>, fga: HKT<F, HKT<G, A>>) => HKT<F, HKT<G, B>>\n}"
    }
  ],
  "datas": [],
  "functions": [
    {
      "type": "function",
      "name": "when",
      "signature": "<F>(F: Applicative<F>): (condition: boolean) => (fu: HKT<F, void>) => HKT<F, void>",
      "description": "Perform a applicative action when a condition is true"
    },
    {
      "type": "function",
      "name": "getApplicativeComposition",
      "signature": "<F, G>(F: Applicative<F>, G: Applicative<G>): ApplicativeComposition<F, G>",
      "description": null
    }
  ],
  "consts": []
}
