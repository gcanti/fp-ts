{
  "type": "module",
  "module": "Foldable",
  "types": [
    {
      "type": "type",
      "name": "Foldable",
      "signature":
        "interface Foldable<F> {\n  readonly URI: F\n  reduce: <A, B>(f: (b: B, a: A) => B, b: B, fa: HKT<F, A>) => B\n}"
    },
    {
      "type": "type",
      "name": "FantasyFoldable",
      "signature": "interface FantasyFoldable<A> {\n  reduce: <B>(f: (b: B, a: A) => B, b: B) => B\n}"
    },
    {
      "type": "type",
      "name": "FoldableComposition",
      "signature":
        "interface FoldableComposition<F, G> {\n  reduce: <A, B>(f: (b: B, a: A) => B, b: B, fga: HKT<F, HKT<G, A>>) => B\n}"
    }
  ],
  "datas": [],
  "functions": [
    {
      "type": "function",
      "name": "getFoldableComposition",
      "signature": "<F, G>(F: Foldable<F>, G: Foldable<G>): FoldableComposition<F, G>",
      "description": null
    },
    {
      "type": "function",
      "name": "foldMap",
      "signature": "<F, M>(F: Foldable<F>, M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: HKT<F, A>): M",
      "description": "A default implementation of `foldMap` using `foldl`"
    },
    {
      "type": "function",
      "name": "fold",
      "signature": "<F, M>(F: Foldable<F>, M: Monoid<M>) => (fa: HKT<F, M>): M",
      "description": null
    },
    {
      "type": "function",
      "name": "toArray",
      "signature": "<F>(F: Foldable<F>) => <A>(fa: HKT<F, A>): Array<A>",
      "description": null
    },
    {
      "type": "function",
      "name": "foldr",
      "signature": "<F>(F: Foldable<F>) => <A, B>(f: (a: A) => (b: B) => B) => (b: B) => (fa: HKT<F, A>): B",
      "description": "A default implementation of `foldr` using `foldMap`"
    },
    {
      "type": "function",
      "name": "getRecordSemigroup",
      "signature":
        "<O extends { [key: string]: any }>(semigroups: { [K in keyof O]: Semigroup<O[K]> }): Semigroup<{ [K in keyof O]: O[K] }>",
      "description": "Returns a monoid under array concatenation"
    },
    {
      "type": "function",
      "name": "intercalate",
      "signature": "<F, M>(F: Foldable<F>, M: Monoid<M>) => (sep: M) => (fm: HKT<F, M>): M",
      "description":
        "Fold a data structure, accumulating values in some `Monoid`, combining adjacent elements using the specified separator"
    },
    {
      "type": "function",
      "name": "traverse_",
      "signature":
        "<M, F>(M: Applicative<M>, F: Foldable<F>): <A, B>(f: (a: A) => HKT<M, B>, fa: HKT<F, A>) => HKT<M, void>",
      "description":
        "Traverse a data structure, performing some effects encoded by an `Applicative` functor at each value, ignoring the final result"
    },
    {
      "type": "function",
      "name": "sequence_",
      "signature": "<M, F>(M: Applicative<M>, F: Foldable<F>): <A>(fa: HKT<F, HKT<M, A>>) => HKT<M, void>",
      "description":
        "Perform all of the effects in some data structure in the order given by the `Foldable` instance, ignoring the final result."
    }
  ],
  "consts": []
}
