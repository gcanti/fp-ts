{
  "type": "module",
  "module": "Ord",
  "types": [
    {
      "type": "type",
      "name": "Ord",
      "signature": "interface Ord<A> extends Setoid<A> {\n  compare: (x: A) => (y: A) => Ordering\n}"
    }
  ],
  "datas": [],
  "functions": [
    {
      "type": "function",
      "name": "toNativeComparator",
      "signature": "<A>(compare: (x: A) => (y: A) => Ordering): ((x: A, y: A) => number)",
      "description": null
    },
    {
      "type": "function",
      "name": "unsafeCompare",
      "signature": "(x: any) => (y: any): Ordering",
      "description": null
    },
    {
      "type": "function",
      "name": "lessThan",
      "signature": "<A>(ord: Ord<A>) => (x: A) => (y: A): boolean",
      "description": "Test whether one value is _strictly less than_ another"
    },
    {
      "type": "function",
      "name": "greaterThan",
      "signature": "<A>(ord: Ord<A>) => (x: A) => (y: A): boolean",
      "description": "Test whether one value is _strictly greater than_ another"
    },
    {
      "type": "function",
      "name": "lessThanOrEq",
      "signature": "<A>(ord: Ord<A>) => (x: A) => (y: A): boolean",
      "description": "Test whether one value is _non-strictly less than_ another"
    },
    {
      "type": "function",
      "name": "greaterThanOrEq",
      "signature": "<A>(ord: Ord<A>) => (x: A) => (y: A): boolean",
      "description": "Test whether one value is _non-strictly greater than_ another"
    },
    {
      "type": "function",
      "name": "min",
      "signature": "<A>(ord: Ord<A>) => (x: A) => (y: A): A",
      "description": "Take the minimum of two values. If they are considered equal, the first argument is chosen"
    },
    {
      "type": "function",
      "name": "max",
      "signature": "<A>(ord: Ord<A>) => (x: A) => (y: A): A",
      "description": "Take the maximum of two values. If they are considered equal, the first argument is chosen"
    },
    {
      "type": "function",
      "name": "clamp",
      "signature": "<A>(ord: Ord<A>) => (low: A) => (hi: A) => (x: A): A",
      "description": "Clamp a value between a minimum and a maximum"
    },
    {
      "type": "function",
      "name": "between",
      "signature": "<A>(ord: Ord<A>) => (low: A) => (hi: A) => (x: A): boolean",
      "description": "Test whether a value is between a minimum and a maximum (inclusive)"
    },
    {
      "type": "function",
      "name": "fromCompare",
      "signature": "<A>(compare: (x: A) => (y: A) => Ordering): Ord<A>",
      "description": null
    },
    {
      "type": "function",
      "name": "contramap",
      "signature": "<A, B>(f: (b: B) => A, fa: Ord<A>): Ord<B>",
      "description": null
    },
    {
      "type": "function",
      "name": "getSemigroup",
      "signature": "<A>(): Semigroup<Ord<A>>",
      "description": null
    }
  ],
  "consts": [
    {
      "type": "const",
      "name": "ordString",
      "signature": "Ord<string>",
      "description": null
    },
    {
      "type": "const",
      "name": "ordNumber",
      "signature": "Ord<number>",
      "description": null
    },
    {
      "type": "const",
      "name": "ordBoolean",
      "signature": "Ord<boolean>",
      "description": null
    }
  ]
}
