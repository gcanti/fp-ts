{
  "type": "module",
  "module": "Apply",
  "types": [
    {
      "type": "type",
      "name": "Apply",
      "signature":
        "interface Apply<F> extends Functor<F> {\n  ap: <A, B>(fab: HKT<F, (a: A) => B>, fa: HKT<F, A>) => HKT<F, B>\n}"
    },
    {
      "type": "type",
      "name": "FantasyApply",
      "signature":
        "interface FantasyApply<F, A> extends FantasyFunctor<F, A> {\n  ap: <B>(fab: HKT<F, (a: A) => B>) => HKT<F, B>\n}"
    }
  ],
  "datas": [],
  "functions": [
    {
      "type": "function",
      "name": "applyFirst",
      "signature": "<F>(apply: Apply<F>): <A>(fa: HKT<F, A>) => <B>(fb: HKT<F, B>) => HKT<F, A>",
      "description": "Combine two effectful actions, keeping only the result of the first"
    },
    {
      "type": "function",
      "name": "applySecond",
      "signature": "<F>(apply: Apply<F>): <A>(fa: HKT<F, A>) => <B>(fb: HKT<F, B>) => HKT<F, B>",
      "description": "Combine two effectful actions, keeping only the result of the second"
    },
    {
      "type": "function",
      "name": "liftA2",
      "signature": "<F>(apply: Apply<F>): <A, B, C>(f: Curried2<A, B, C>) => Curried2<HKT<F, A>, HKT<F, B>, HKT<F, C>>",
      "description":
        "Lift a function of two arguments to a function which accepts and returns values wrapped with the type constructor `F`"
    },
    {
      "type": "function",
      "name": "liftA3",
      "signature":
        "<F>(apply: Apply<F>): <A, B, C, D>(f: Curried3<A, B, C, D>) => Curried3<HKT<F, A>, HKT<F, B>, HKT<F, C>, HKT<F, D>>",
      "description":
        "Lift a function of three arguments to a function which accepts and returns values wrapped with the type constructor `F`"
    },
    {
      "type": "function",
      "name": "liftA4",
      "signature":
        "<F>(apply: Apply<F>): <A, B, C, D, E>(f: Curried4<A, B, C, D, E>) => Curried4<HKT<F, A>, HKT<F, B>, HKT<F, C>, HKT<F, D>, HKT<F, E>>",
      "description":
        "Lift a function of four arguments to a function which accepts and returns values wrapped with the type constructor `F`"
    }
  ],
  "consts": []
}
