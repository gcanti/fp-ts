{
  "type": "module",
  "module": "Traversable",
  "types": [
    {
      "type": "type",
      "name": "Traversable",
      "signature":
        "interface Traversable<T> extends Functor<T>, Foldable<T> {\n  traverse: <F>(F: Applicative<F>) => <A, B>(f: (a: A) => HKT<F, B>, ta: HKT<T, A>) => HKT<F, HKT<T, B>>\n}"
    },
    {
      "type": "type",
      "name": "FantasyTraversable",
      "signature":
        "interface FantasyTraversable<T, A> extends FantasyFunctor<T, A>, FantasyFoldable<A> {\n  traverse: <F>(F: Applicative<F>) => <B>(f: (a: A) => HKT<F, B>) => HKT<F, HKT<T, B>>\n}"
    },
    {
      "type": "type",
      "name": "TraversableComposition",
      "signature":
        "interface TraversableComposition<F, G> extends FoldableComposition<F, G>, FunctorComposition<F, G> {\n  traverse: <H>(H: Applicative<H>) => <A, B>(f: (a: A) => HKT<H, B>, fga: HKT<F, HKT<G, A>>) => HKT<H, HKT<F, HKT<G, B>>>\n}"
    }
  ],
  "datas": [],
  "functions": [
    {
      "type": "function",
      "name": "sequence",
      "signature": "<F, T>(F: Applicative<F>, T: Traversable<T>): <A>(tfa: HKT<T, HKT<F, A>>) => HKT<F, HKT<T, A>>",
      "description": null
    },
    {
      "type": "function",
      "name": "getTraversableComposition",
      "signature": "<F, G>(F: Traversable<F>, G: Traversable<G>): TraversableComposition<F, G>",
      "description": null
    }
  ],
  "consts": []
}
